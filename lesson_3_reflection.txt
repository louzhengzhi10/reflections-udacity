When would you want to use a remote repository rather than keeping all your work local?

    I want to use a remote repository when I need to share my work with others. When I develop applications in a team, I cannot keep everything only in my local computer. I also want to use remote when I work from different devices. Pushing everything on GitHub can allow me to work wherever I want. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

   Similar to what we have argued about push, we want to pull manually only when we are ready. When I am currently working on a modification of files, I do not Git to automatically pull the changed and override what I have been working on locally.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

    Brahcnes are used within a specific repository. We use branches when we want to experiment, or create a new version of our application. Clones are used from GitHub to our local machine, or between local machines. We use clones to make copies of repositories, so that we can modify them later. Forks are also used to copy repositories, but only within GitHub ones. Also, fork is a term used only under the context of GitHub, whereas branches and clones are concepts in Git.

What is the benefit of having a copy of the last known state of the remote stored locally?

    When Git stores a copy of the last known state of the remote, it will be much easier the next time Git pull from the remote. Git will know where things were left off last time, and then it is able to catch up the update quickly and easily. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    Without using GitHub, we can pass files by emails or clouds, and each time I have made a change, I will send all files to all of my teammates. It is hard in this way to track changes made by different people. It is also hard to transmit all files every time I made a change. 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

    I would make changes in a separate branch when I want to experiment with something without affecting the original functionalities in the master branch. This provides me the option to preserve a working master branch, and I can continue working on my trials before it fully works. I will then directly merge it into the master branch. I also have the option to compare the new branch directly with the master branch. By modifying directly on the master branch, I avoid the burden to keep each branch updated and merge the master branch into my new branch when any changes are made in master. 
