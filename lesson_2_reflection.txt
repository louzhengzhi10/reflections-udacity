What happens when you initialize a repository? Why do you need to do it?

    When I initialize a repository, the system automatically creates a directory called .git, which contains all the information that supports functions provided by git. I need to do this to indicate to git that I intend to use the tools. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    Staging area is different from the working directory in that it only contains a limited number of files in the working directory. It differs from the repository in that it can be changed without leaving any traces, whereas every commit in the repository is recorded in its log. It offers a buffer between the repository and the working directory to allow failures and changes. 

How can you use the staging area to make sure you have one commit per logical
change?

    I can diff the contents in the staging area to the latest commit to make sure that the current contents in the staging area is a logical step ahead of the lastest commit. I will also use this information to write my commit message. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches would be helpful if I want to create experiment for a while without affecting my original code, or if I try to create a special version of my repository. Creating branches can preserve the original code, while keeping record of my new changes at the same time. 

How do the diagrams help you visualize the branch structure?

    The diagram can visualize the history of different branches easily. For instance, I can clearly see from the diagram where a new branch was created and diverted from the master branch. It can also show me the linear progress in multiple branches. It can even include branches that do not belong to any branch. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result contains updates introduced by both branches. We represent as it is in the diagram to show the merge of two different branches, and the legacy each branch brings. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
